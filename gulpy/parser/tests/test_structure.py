import numpy as np
import unittest as ut
from pymatgen.core import Structure

from gulpy.parser import StructureParser


class TestParser(ut.TestCase):
    def setUp(self):
        self.parser = StructureParser.from_file("files/opti/opti.out")

    def test_volume(self):
        vol = self.parser.get_volume()
        self.assertEqual(vol, 1328.491826)

    def test_num_atoms(self):
        n = self.parser.get_num_atoms()
        self.assertEqual(n, 130)

    def test_lattice(self):
        vectors = self.parser.get_lattice()
        expected = [
            [14.13378, -0.013675, 0.102028],
            [-0.01734, 17.029098, 0.00445],
            [0.038047, 0.001309, 4.992079],
        ]
        self.assertEqual(vectors, expected)

        vectors = self.parser.get_lattice(input=True)
        expected = [[14.110542, 0.0, 0.0], [0.0, 17.892402, 0.0], [0.0, 0.0, 5.261948]]
        self.assertEqual(vectors, expected)

    def test_frac_coords(self):
        labels, coords = self.parser.get_frac_coords()
        expected_labels = [
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "O3",
            "Si3",
            "Si3",
            "Si3",
            "Si3",
            "Si3",
            "Si3",
            "Si3",
            "Si3",
            "Si3",
            "Si3",
            "Si3",
            "Si3",
            "Si3",
            "Si3",
            "Si3",
            "Si3",
            "Si3",
            "Si3",
            "Si3",
            "Si3",
            "Si3",
            "Si3",
            "Si3",
            "Si3",
            "C3",
            "C3",
            "C3",
            "N3",
            "C3",
            "C3",
            "N3",
            "C3",
            "C3",
            "N3",
            "H",
            "H",
            "H",
            "H",
            "H",
            "H",
            "H",
            "H47",
            "H",
            "H",
            "H",
            "H",
            "H47",
            "H",
            "H",
            "H",
            "H",
            "H47",
            "H47",
            "C3",
            "C3",
            "C3",
            "N3",
            "C3",
            "C3",
            "N3",
            "C3",
            "C3",
            "N3",
            "H",
            "H",
            "H",
            "H",
            "H",
            "H",
            "H",
            "H47",
            "H",
            "H",
            "H",
            "H",
            "H47",
            "H",
            "H",
            "H",
            "H",
            "H47",
            "H47",
        ]

        expected_coords = [
            [0.269768, 0.959838, 0.089691],
            [0.779423, 0.431828, 0.145624],
            [0.66484, 0.945265, 0.129643],
            [0.167308, 0.426455, 0.171964],
            [0.343, 0.965152, 0.597454],
            [0.789746, 0.493789, 0.65708],
            [0.648949, 0.997283, 0.643856],
            [0.144962, 0.484485, 0.669815],
            [0.377873, 0.079542, 0.195951],
            [0.920734, 0.509601, 0.276504],
            [0.530085, 0.015234, 0.255004],
            [0.087663, 0.57203, 0.241768],
            [0.37647, 0.838573, 0.953471],
            [0.917281, 0.396779, 0.750587],
            [0.530448, 0.910992, 0.903911],
            [0.086022, 0.33482, 0.75575],
            [0.222636, 0.089036, 0.282336],
            [0.753115, 0.592879, 0.215812],
            [0.689065, 0.106069, 0.217702],
            [0.259921, 0.576663, 0.361327],
            [0.210964, 0.836794, 0.851528],
            [0.732885, 0.340493, 0.703149],
            [0.725168, 0.843657, 0.872821],
            [0.255218, 0.342232, 0.758892],
            [0.074515, 0.18935, 0.22945],
            [0.583612, 0.688666, 0.406282],
            [0.879014, 0.175488, 0.234623],
            [0.37584, 0.724779, 0.4192],
            [0.081213, 0.703287, 0.946],
            [0.580607, 0.237445, 0.732439],
            [0.880285, 0.730702, 0.742891],
            [0.369591, 0.193054, 0.752171],
            [0.249683, 0.245527, 0.153963],
            [0.691545, 0.695254, 0.964132],
            [0.718305, 0.25331, 0.132854],
            [0.265691, 0.694126, 0.000668],
            [0.187879, 0.714267, 0.50325],
            [0.763499, 0.195143, 0.625542],
            [0.746149, 0.749747, 0.453369],
            [0.183373, 0.201197, 0.660036],
            [0.952413, 0.242632, 0.656467],
            [0.501433, 0.82726, 0.516567],
            [0.934026, 0.654934, 0.175078],
            [0.521148, 0.158084, 0.118085],
            [0.972672, 0.591062, 0.684298],
            [0.495156, 0.097835, 0.640392],
            [0.96054, 0.313593, 0.163469],
            [0.528345, 0.770964, 0.036139],
            [0.306598, 0.019805, 0.324782],
            [0.807596, 0.510429, 0.331059],
            [0.638512, 0.020268, 0.321505],
            [0.166181, 0.511961, 0.35344],
            [0.304493, 0.901929, 0.849943],
            [0.80586, 0.410537, 0.824378],
            [0.639795, 0.915394, 0.829738],
            [0.162113, 0.401021, 0.843072],
            [0.188109, 0.183674, 0.335683],
            [0.696502, 0.679605, 0.288526],
            [0.761746, 0.180843, 0.30515],
            [0.274255, 0.676112, 0.324689],
            [0.187535, 0.738032, 0.821992],
            [0.697441, 0.25096, 0.807085],
            [0.760295, 0.750719, 0.777794],
            [0.267083, 0.244569, 0.828062],
            [0.970915, 0.232017, 0.328712],
            [0.492666, 0.749035, 0.340369],
            [0.968508, 0.671199, 0.86399],
            [0.488966, 0.17641, 0.813933],
            [0.478034, 0.093121, 0.31777],
            [0.980852, 0.585508, 0.355706],
            [0.481053, 0.832428, 0.838386],
            [0.976884, 0.320689, 0.838222],
            [0.338849, 0.526369, 0.878552],
            [0.435183, 0.554433, 0.985391],
            [0.461838, 0.630253, 0.864087],
            [0.457609, 0.543911, 0.274681],
            [0.555548, 0.526242, 0.373353],
            [0.587904, 0.452381, 0.535245],
            [0.520251, 0.398688, 0.664944],
            [0.529232, 0.383209, 0.951079],
            [0.443562, 0.345991, 0.087404],
            [0.460268, 0.299808, 0.320638],
            [0.341766, 0.506963, 0.680073],
            [0.282698, 0.567741, 0.88654],
            [0.317293, 0.476407, 0.984753],
            [0.483854, 0.522591, 0.874737],
            [0.418465, 0.675401, 0.933242],
            [0.446958, 0.627317, 0.657556],
            [0.53639, 0.64137, 0.893716],
            [0.419123, 0.496797, 0.322055],
            [0.571559, 0.56813, 0.519456],
            [0.603616, 0.535796, 0.206723],
            [0.632205, 0.473605, 0.694158],
            [0.632406, 0.415699, 0.409772],
            [0.452207, 0.412168, 0.62821],
            [0.544506, 0.432377, 0.048572],
            [0.592198, 0.355104, 0.999429],
            [0.386096, 0.383213, 0.140729],
            [0.419468, 0.313207, 0.928978],
            [0.410888, 0.256783, 0.337297],
            [0.527538, 0.27977, 0.319473],
            [0.071661, 0.040418, 0.528112],
            [0.067563, 0.951545, 0.555527],
            [0.130581, 0.894187, 0.40139],
            [0.055221, 0.93129, 0.837606],
            [0.997406, 0.861506, 0.888553],
            [0.933165, 0.846956, 0.141013],
            [0.864379, 0.91054, 0.174323],
            [0.826182, 0.926514, 0.438491],
            [0.851973, 0.00718, 0.574],
            [0.805746, 0.057285, 0.771505],
            [0.068697, 0.053873, 0.31777],
            [0.132367, 0.058214, 0.643932],
            [0.01522, 0.074096, 0.619545],
            [0.006318, 0.94182, 0.448202],
            [0.200572, 0.893988, 0.451095],
            [0.132941, 0.911225, 0.208041],
            [0.10934, 0.833767, 0.393924],
            [0.037671, 0.977402, 0.958603],
            [0.032261, 0.815839, 0.792736],
            [0.945651, 0.862464, 0.755135],
            [0.969457, 0.830263, 0.315649],
            [0.888631, 0.797006, 0.134251],
            [0.894886, 0.961124, 0.117597],
            [0.837221, 0.877748, 0.550951],
            [0.757514, 0.909745, 0.431999],
            [0.907116, 0.987572, 0.689366],
            [0.878469, 0.047331, 0.424476],
            [0.854337, 0.094894, 0.852657],
            [0.783478, 0.026567, 0.928353],
        ]

        self.assertEqual(labels, expected_labels)
        self.assertEqual(coords, expected_coords)

    def test_species_labels(self):
        renamer = self.parser.get_species_labels()
        expected = {"H": "H", "H47": "H", "C3": "C", "N3": "N", "O3": "O", "Si3": "Si"}
        self.assertEqual(renamer, expected)

    def test_pymatgen(self):
        struct = self.parser.get_pymatgen_structure()
        self.assertIsInstance(struct, Structure)


class TestParserCoreShell(ut.TestCase):
    def setUp(self):
        self.parser = StructureParser.from_file("files/slc/coreshell.out")

    def test_noshell(self):
        _, coords = self.parser.get_frac_coords()

        expected_coords = np.array(
            [
                [0.92427, 0.12066, 0.06241],
                [0.551688, 0.243747, 0.275685],
                [0.404959, 0.615838, 0.996924],
                [0.913295, 0.789856, 0.204917],
                [0.20558, 0.118979, 0.066227],
                [0.193741, 0.752882, 0.534882],
                [0.714505, 0.228658, 0.802564],
                [0.104541, 0.726985, 0.102964],
                [0.161225, 0.384976, 0.089634],
                [0.670622, 0.863185, 0.088806],
                [0.902117, 0.942305, 0.132922],
                [0.818283, 0.18136, 0.914632],
                [0.733081, 0.509604, 0.20645],
                [0.399497, 0.235022, 0.133817],
                [0.654967, 0.264588, 0.543516],
                [0.350841, 0.945431, 0.162607],
                [0.313659, 0.380158, 0.008838],
                [0.297994, 0.674256, 0.806465],
                [0.046502, 0.747613, 0.405976],
                [0.035226, 0.979688, 0.085656],
                [0.13051, 0.915168, 0.023776],
                [0.142075, 0.663476, 0.358053],
                [0.459292, 0.019255, 0.723628],
                [0.873556, 0.450516, 0.950718],
            ]
        )

        self.assertIsNone(
            np.testing.assert_almost_equal(np.array(coords), expected_coords)
        )

    def test_with_shell(self):
        _, coords = self.parser.get_frac_coords(include_shell=True)

        expected_coords = [
            [0.92427, 0.12066, 0.06241],
            [0.551688, 0.243747, 0.275685],
            [0.404959, 0.615838, 0.996924],
            [0.913295, 0.789856, 0.204917],
            [0.20558, 0.118979, 0.066227],
            [0.193741, 0.752882, 0.534882],
            [0.714505, 0.228658, 0.802564],
            [0.104541, 0.726985, 0.102964],
            [0.161225, 0.384976, 0.089634],
            [0.670622, 0.863185, 0.088806],
            [0.902117, 0.942305, 0.132922],
            [0.818283, 0.18136, 0.914632],
            [0.733081, 0.509604, 0.20645],
            [0.399497, 0.235022, 0.133817],
            [0.654967, 0.264588, 0.543516],
            [0.350841, 0.945431, 0.162607],
            [0.313659, 0.380158, 0.008838],
            [0.297994, 0.674256, 0.806465],
            [0.046502, 0.747613, 0.405976],
            [0.035226, 0.979688, 0.085656],
            [0.13051, 0.915168, 0.023776],
            [0.142075, 0.663476, 0.358053],
            [0.459292, 0.019255, 0.723628],
            [0.873556, 0.450516, 0.950718],
            [0.138076, 0.354713, 0.090116],
            [0.652844, 0.844986, 0.084362],
            [0.899949, 0.937838, 0.135504],
            [0.818422, 0.183916, 0.916556],
            [0.735184, 0.518151, 0.209903],
            [0.403158, 0.23266, 0.148876],
            [0.652629, 0.262167, 0.539895],
            [0.343559, 0.945995, 0.167408],
            [0.307311, 0.374713, 0.011348],
            [0.299298, 0.662365, 0.814289],
            [0.061023, 0.756398, 0.41202],
            [0.039574, 0.968626, 0.098116],
            [0.114229, 0.894295, 0.02524],
            [0.143255, 0.678163, 0.351738],
            [0.450852, 0.00971, 0.70446],
            [0.882559, 0.458605, 0.948176],
        ]

        self.assertIsNone(
            np.testing.assert_almost_equal(np.array(coords), expected_coords)
        )


if __name__ == "__main__":
    ut.main()
